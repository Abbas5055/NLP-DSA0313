import nltk
from nltk import PCFG, ProbabilisticProduction
from nltk.parse import pchart

# Define a simple probabilistic context-free grammar
grammar = PCFG.fromstring("""
    S -> NP VP [1.0]
    NP -> Det N [0.5] | NP PP [0.25] | 'John' [0.1] | 'I' [0.15]
    VP -> V NP [0.5] | VP PP [0.25] | V [0.25]
    PP -> P NP [1.0]
    Det -> 'the' [0.6] | 'my' [0.4]
    N -> 'man' [0.5] | 'telescope' [0.5]
    V -> 'saw' [0.4] | 'ate' [0.6]
    P -> 'with' [1.0]
""")

# Define a function to parse a sentence using the PCFG
def parse_sentence(sentence):
    tokens = sentence.split()
    parser = pchart.InsideChartParser(grammar)
    parses = list(parser.parse(tokens))
    return parses

# Example sentence to parse
sentence = "I saw the man with my telescope"

# Parse the sentence
parses = parse_sentence(sentence)

# Print all parse trees with their probabilities
for parse in parses:
    print(parse)

# Print the most probable parse tree
if parses:
    best_parse = max(parses, key=lambda tree: tree.prob())
    print("\nMost probable parse tree:")
    print(best_parse)
else:
    print("No parses found.")
